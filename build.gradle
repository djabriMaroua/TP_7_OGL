import com.alessio.slack.model.Message

plugins {
    id 'java'
    id 'jacoco'
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.25"
    id "io.github.oleksiiparf.slack-webhook" version "1.0.0"
    id "de.zebrajaeger.sendMail" version "0.2.2"
    id "org.sonarqube" version "6.0.1.5171"
}

group = 'com.example'
version = '1.0'
apply plugin: 'maven-publish'

group = 'com.my-project'
version = '0.1-SNAPSHOT'

publishing {
    repositories {
        maven {
            url = 'https://mymavenrepo.com/repo/uW1ml5rCuyPDeACXAsO1/'
            credentials {
                username = 'myMavenRepo'
                password = 'maroua2003'
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'io.cucumber:cucumber-java:6.0.0'
    testImplementation 'io.cucumber:cucumber-junit:6.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform() // Utiliser JUnit 5 pour les tests
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        junitXml.required = true // Générer un rapport JUnit XML pour l'archivage
        html.required = true // Générer un rapport HTML
    }
}

cucumberReports {
    outputDir = file('build/reports/cucumber')
    buildId = '0'
    reports = files('build/cucumber-reports/cucumber.json') // Chemin vers le fichier JSON généré par Cucumber
}

sonar {
    properties {
        property "sonar.projectName", "TPUnitsTest"
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.login", "admin"
        property "sonar.password", "admin"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property "sonar.java.binaries", "build/classes/java/main"
        property "sonar.junit.reportPaths", "build/test-results/test"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/reports/jacoco/test/jacocoTestReport.xml"
    }
}

jacoco {
    toolVersion = "0.8.8" // Version de JaCoCo
    reportsDirectory = layout.buildDirectory.dir('reports/jacoco')
}

jacocoTestReport {
    dependsOn test // Exécuter les tests avant de générer le rapport JaCoCo
    reports {
        xml.required = true // Rapport XML pour SonarQube
        csv.required = false
        html.required = true // Rapport HTML pour consultation locale
    }
}

slack {
    publishedPlugin {
        webHook = "https://hooks.slack.com/services/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"
        attachment {
            fallback = "New version successfully published."
            pretext = "New version successfully published."
            color = "good"
            field {
                title = "Module"
                value = project.name
                shortValue = true
            }
            field {
                title = "Version"
                value = project.version
                shortValue = true
            }
        }
    }
    builtSucceed {
        webHook = "https://hooks.slack.com/services/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"
        attachment {
            fallback = "Project successfully built."
            pretext = "Project successfully built."
            field {
                title = "Module"
                value = project.name
                shortValue = true
            }
            field {
                title = "Version"
                value = project.version
                shortValue = true
            }
        }
    }
}