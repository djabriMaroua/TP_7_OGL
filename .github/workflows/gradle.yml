pipeline {
    agent any

    stages {
        stage('Test') {
            steps {
                script {
                    echo "Running unit tests"
                }
                sh './gradlew test'
                junit '**/build/test-results/test/*.xml' // Archive test results
                cucumber 'build/reports/tests/test/cucumber.json' // Cucumber reports
            }
        }

        stage('Code Analysis') {
            steps {
                sh './gradlew sonarqube'
            }
        }

        stage('Code Quality') {
            steps {
                script {
                    def qualityGate = waitForQualityGate() // Requires SonarQube plugin
                    if (qualityGate.status != 'OK') {
                        error "Pipeline aborted due to quality gate failure: ${qualityGate.status}"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                sh './gradlew jar'
                sh './gradlew javadoc'
                archiveArtifacts artifacts: 'build/libs/*.jar', fingerprint: true
                archiveArtifacts artifacts: 'build/docs/javadoc/**', fingerprint: true
            }
        }

        stage('Deploy') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'mymavenrepo-credentials', 
                                                 usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                    sh './gradlew publish'
                }
            }
        }

        stage('Notification') {
            steps {
                script {
                    // Notify Slack or email
                    def successMessage = "Deployment succeeded! The latest jar has been deployed."
                    def failureMessage = "Pipeline failed in stage: ${currentBuild.currentStageName}"

                    if (currentBuild.result == 'SUCCESS') {
                        sendSlackNotification(successMessage)
                        sendEmailNotification(successMessage)
                    } else {
                        sendSlackNotification(failureMessage)
                        sendEmailNotification(failureMessage)
                    }
                }
            }
        }
    }
}

def sendSlackNotification(message) {
    slackSend(channel: '#devops', message: message, color: 'good')
}

def sendEmailNotification(message) {
    emailext subject: "Pipeline Notification",
             body: message,
             to: 'team@company.com'
}
