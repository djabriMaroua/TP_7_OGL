name: SonarQube

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  # Phase 1: Test
  test:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Run Unit Tests
        run: ./gradlew test
      - name: Archive Test Results
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: build/test-results

  # Phase 2: Code Analysis
  code-analysis:
    name: Code Analysis with SonarQube
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
      - name: Run SonarQube Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./gradlew sonarqube

  # Phase 3: Code Quality
  quality-gates:
    name: Check SonarQube Quality Gate
    runs-on: ubuntu-latest
    needs: code-analysis
    steps:
      - name: Wait for Quality Gate
        uses: SonarSource/sonarqube-quality-gate-action@v1.1
        env:
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Phase 4: Build
  build:
    name: Build Jar and Documentation
    runs-on: ubuntu-latest
    needs: quality-gates
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
      - name: Make gradlew executable
        run: chmod +x ./gradlew
      - name: Build Project
        run: ./gradlew build
      - name: Generate Documentation
        run: ./gradlew javadoc
      - name: Archive Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: jar-and-docs
          path: build/libs/*.jar

  # Phase 5: Deploy
  deploy:
    name: Deploy to Maven Repo
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Upload to MyMavenRepo
        run: |
          curl -T build/libs/*.jar -u ${{ secrets.MY_MAVEN_REPO_USER }}:${{ secrets.MY_MAVEN_REPO_PASSWORD }} https://mymavenrepo.com/repo/your-repo-id/

  # Phase 6: Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Notify via Email
        uses: dawidd6/action-send-mail@v4
        with:
          server_address: smtp.example.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "Deployment Successful"
          body: "The latest build and deployment were successful!"
          to: team@example.com
      - name: Notify via Slack
        uses: slackapi/slack-github-action@v1.23.0
        with:
          payload: |
            {
              "text": "The latest build and deployment were successful! :tada:"
            }
          env:
            SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
